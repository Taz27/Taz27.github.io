{"version":3,"sources":["graphql/getPokemons.js","components/Pokemon.js","containers/PokemonsContainer.js","components/CodedBy.js","App.js","index.js"],"names":["GET_POKEMONS","gql","Pokemon","pokemon","className","name","maxHP","maxCP","src","image","alt","attacks","special","slice","map","attack","key","damage","PokemonsContainer","pokemons_array","useQuery","variables","first","loading","error","data","pokemons","id","console","CodedBy","style","position","fontFamily","textAlign","width","bottom","left","marginBottom","role","aria-label","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kqBAIO,IAAMA,E,MAAeC,GAAH,KCmBVC,MArBf,YAA+B,IAAZC,EAAW,EAAXA,QACf,OACI,yBAAKC,UAAU,WACf,yBAAKA,UAAU,iBACX,2BAAID,EAAQE,OAEhB,yBAAKD,UAAU,iBACX,8BAAOD,EAAQG,OACf,8BAAOH,EAAQI,QAEnB,yBAAKH,UAAU,kBACX,yBAAKI,IAAKL,EAAQM,MAAOC,IAAKP,EAAQE,QAE1C,yBAAKD,UAAU,oBAEVD,EAAQQ,QAAQC,QAAQC,MAAM,EAAG,GAAGC,KAAI,SAAAC,GAAM,OAAI,0BAAMC,IAAG,UAAKD,EAAOV,KAAZ,YAAoBU,EAAOE,SAAWF,EAAOV,YCZtG,SAASa,IAEpB,IAAIC,EAFoC,EAKPC,mBAASpB,EAAc,CACpDqB,UAAW,CAACC,MAAO,KADfC,EALgC,EAKhCA,QAASC,EALuB,EAKvBA,MAAOC,EALgB,EAKhBA,KAUxB,OALIA,GAAQA,EAAKC,WACbP,EAAiBM,EAAKC,SAASZ,KAAI,SAAAX,GAAO,OAAI,kBAAC,EAAD,CAASa,IAAKb,EAAQwB,GAAIxB,QAASA,QAIjFoB,EAAgB,wBAAInB,UAAU,UAAd,cAGhBoB,GACAI,QAAQJ,MAAMA,GACP,uCAKP,yBAAKpB,UAAU,aACVe,GCrBEU,MARf,WACI,OACI,yBAAKC,MAAO,CAACC,SAAU,QAASC,WAAY,+BAAgCC,UAAW,OAAQC,MAAO,IAAKC,OAAQ,EAAGC,KAAM,EAAGC,aAAc,QAA7I,cACe,0BAAMC,KAAK,MAAMC,aAAW,cAA5B,gBADf,UACwE,4BAAI,4CAD5E,QAC8G,kDAD9G,OACiJ,gD,MCoB1IC,MAhBf,WAEE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAGP,OACI,kBAAC,iBAAD,CAAgBF,OAAQA,GACpB,8BACG,kBAACvB,EAAD,MACA,kBAAC,EAAD,SCdb0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e75a852e.chunk.js","sourcesContent":["//import gql tag function.\r\nimport gql from 'graphql-tag';\r\n\r\n//define GraphQL query.\r\nexport const GET_POKEMONS = gql`\r\n    query pokemons($first: Int!) {\r\n        pokemons(first: $first) {\r\n            id\r\n            name\r\n            image\r\n            maxHP\r\n            maxCP\r\n            attacks {\r\n                special {\r\n                    name\r\n                    damage\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n`;","import React from 'react';\r\n\r\nfunction Pokemon({ pokemon }) {\r\n    return (\r\n        <div className=\"pokemon\">\r\n        <div className=\"pokemon__name\">\r\n            <p>{pokemon.name}</p>\r\n        </div>\r\n        <div className=\"pokemon__meta\">\r\n            <span>{pokemon.maxHP}</span>\r\n            <span>{pokemon.maxCP}</span>\r\n        </div>\r\n        <div className=\"pokemon__image\">\r\n            <img src={pokemon.image} alt={pokemon.name} />\r\n        </div>\r\n        <div className=\"pokemon__attacks\">\r\n            {/* display only first 3 special attacks */}\r\n            {pokemon.attacks.special.slice(0, 3).map(attack => <span key={`${attack.name}-${attack.damage}`}>{attack.name}</span>)}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Pokemon;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { GET_POKEMONS } from '../graphql/getPokemons';\r\nimport Pokemon from '../components/Pokemon';\r\n\r\nexport default function PokemonsContainer() {\r\n    \r\n    let pokemons_array;\r\n\r\n    //pull out 'loading', 'error' and 'data' props from object returned by useQuery hook.\r\n    const { loading, error, data } = useQuery(GET_POKEMONS, {\r\n        variables: {first: 9}\r\n    });\r\n\r\n    //if data exists, map the pokemons array into Pokemon components.\r\n    if (data && data.pokemons) {\r\n        pokemons_array = data.pokemons.map(pokemon => <Pokemon key={pokemon.id} pokemon={pokemon} />);\r\n    }\r\n    \r\n    //if query is in 'loading' state, show message on screen.\r\n    if (loading) return <h3 className=\"center\">Loading...</h3>;\r\n    \r\n    //if error exists, log it and show error message.\r\n    if (error) {\r\n        console.error(error);\r\n        return <h2>Error!</h2>;\r\n    }\r\n    \r\n    //Return Pokemon components if there is no error and not in loading state.\r\n    return (\r\n        <div className=\"container\">\r\n            {pokemons_array}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nfunction CodedBy() {\r\n    return (\r\n        <div style={{position: \"fixed\", fontFamily: \"Arial, Helvetica, sans-serif\", textAlign: \"left\", width: 300, bottom: 0, left: 0, marginBottom: \"5px\"}}>\r\n            Coded with <span role=\"img\" aria-label=\"Love emoji\">❤️</span> using <em><strong>ReactJS</strong></em> and <strong>Apollo GraphQL</strong> by <strong>TARAN MAND</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodedBy;","import React from 'react';\nimport ApolloClient from 'apollo-boost';\n//import 'ApolloProvider' Context Provider Component.\nimport { ApolloProvider } from '@apollo/react-hooks'; \nimport PokemonsContainer from './containers/PokemonsContainer';\nimport CodedBy from './components/CodedBy';\n\nimport './App.css';\n\nfunction App() {\n  //create an ApolloClient instance and set Pokemon GraphQL API (server) endpoint.\n  const client = new ApolloClient({\n    uri: 'https://graphql-pokemon2.vercel.app'\n  });\n\n  return (\n      <ApolloProvider client={client}>\n          <main>\n             <PokemonsContainer />\n             <CodedBy />\n          </main>\n      </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}