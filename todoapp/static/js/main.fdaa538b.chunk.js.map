{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/CodedBy.js","App.js","index.js"],"names":["TodoItem","props","style","item","completed","fontStyle","color","textDecoration","undefined","name","onClick","e","deletefunc","id","className","type","onChange","event","changefunc","checked","title","TodoList","state","todos","isLoading","handleChange","bind","handleKeyPress","handleDelete","$","on","fadeToggle","off","which","todo","target","value","idArray","this","map","newTodo","userId","length","Math","max","setState","prevState","todosAfterDelete","filter","getAttribute","parent","fadeOut","updatedTodosData","Object","assign","fetch","then","res","json","data","randNumsSet","Set","size","randNum","floor","random","add","smallTodosArray","val","push","addEListeners","removeEListeners","console","log","todoItems","key","todoElement","placeholder","onKeyPress","alt","src","React","Component","CodedBy","position","textAlign","width","bottom","left","role","aria-label","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdaa538b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TodoItem(props) {\r\n    //console.log(props);\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    //className={props.item.completed ? \"todo-done\" : undefined}\r\n    return (\r\n        <li style={props.item.completed ? completedStyle : undefined}><span name=\"span\" onClick={(e) => props.deletefunc(props.item.id, e)}><i name=\"i\" className=\"fas fa-trash-alt\"></i></span>\r\n        <input type=\"checkbox\" onChange={(event) => props.changefunc(props.item.id, event)} checked={props.item.completed} /> {props.item.title}</li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport $ from 'jquery';\r\n\r\nclass TodoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: [],\r\n            isLoading: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    addEListeners() {\r\n        $(\".fa-pencil-alt\").on(\"click\", function() {\r\n            //display and hide textbox on click\r\n            $(\"input[type='text'\").fadeToggle();\r\n        });\r\n    }\r\n\r\n    removeEListeners() {\r\n        //remove previously added event listeners\r\n        $(\".fa-pencil-alt\").off(\"click\");\r\n    }\r\n\r\n    handleKeyPress(event) {\r\n        if (event.which === 13) {\r\n            let todo = event.target.value; \r\n            //get ids out of todos and increment the max id\r\n            let idArray = this.state.todos.map((item) => item.id);\r\n            let maxId = idArray.length ? Math.max(...idArray) : 0;\r\n            //console.log(idArray, maxId);\r\n            let newTodo = {\r\n                userId: 27,\r\n                id: maxId + 1,\r\n                title: todo,\r\n                completed: false\r\n            };\r\n            this.setState(prevState => {\r\n                return {todos: [...prevState.todos, newTodo]};\r\n            });\r\n            event.target.value = \"\";\r\n        }\r\n    }\r\n\r\n    handleDelete(id, event) {\r\n        //fade out list item then remove from state\r\n        const todosAfterDelete = this.state.todos.filter(item => item.id !== id);\r\n        \r\n        if (event.target.getAttribute(\"name\") === \"i\") {\r\n            $(event.target).parent().parent().fadeOut(500, () => this.setState({todos: todosAfterDelete}));\r\n        } else {\r\n            $(event.target).parent().fadeOut(500, () => this.setState({todos: todosAfterDelete}));\r\n        }    \r\n        \r\n    }\r\n\r\n    handleChange(id, event) {\r\n        // Update state so that the item with the given id flips `completed` from false to true (or vise versa)\r\n        // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. \r\n        //(Think how you might use the `.map` method to do this)\r\n        let updatedTodosData = this.state.todos.map(item => {\r\n            if (item.id === id) {\r\n                //item.completed = !item.completed; ---NEVER MODIFY STATE DIRECTLY!\r\n                //console.log(event.target.checked);\r\n    \r\n                return Object.assign({...item}, {completed: !item.completed});\r\n            }\r\n            //console.log(id);\r\n            return item;\r\n        });\r\n        //event.target.classList.toggle(\"todo-done\", event.target.checked);\r\n        //console.log(this.state.todos[0]);\r\n        this.setState({todos: updatedTodosData});\r\n    }\r\n    \r\n    componentDidMount() {\r\n       \r\n        this.setState({isLoading: true});\r\n\r\n        fetch(\"https://jsonplaceholder.typicode.com/todos\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            //declare new set that will store unique random numbers\r\n            let randNumsSet = new Set();\r\n\r\n            //generate 5 unique random numbers and add to set\r\n            while (randNumsSet.size < 5) {\r\n                let randNum = Math.floor(Math.random() * data.length);\r\n                randNumsSet.add(randNum);\r\n            }\r\n            \r\n            //create a new (smaller) array and push 5 random todos (fetched by API) into it \r\n            let smallTodosArray = [];\r\n            for (let val of randNumsSet) {\r\n                smallTodosArray.push(data[val]);\r\n            }\r\n            //add 5 random totos into the state.\r\n            this.setState({isLoading: false, todos: smallTodosArray});\r\n\r\n            this.addEListeners();\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //remove event listeners\r\n        this.removeEListeners();\r\n        console.log(\"event handlers removed!\");\r\n    }\r\n\r\n    render() {\r\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} changefunc={this.handleChange} deletefunc={this.handleDelete} />);\r\n        \r\n        const todoElement = <ul>\r\n                                {todoItems}\r\n                            </ul>;\r\n    \r\n        return (\r\n            <div className=\"todo-list\">\r\n                <h1>To-Do List<i className=\"fas fa-pencil-alt\"></i></h1>\r\n                <input type=\"text\" placeholder=\"Add New Todo\" onKeyPress={this.handleKeyPress} />\r\n\r\n                {this.state.isLoading ? \r\n                <img alt =\"loading gif\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/giphy.gif\" /> : \r\n                todoElement}\r\n                \r\n            </div>\r\n            );\r\n    \r\n    }    \r\n}\r\n\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nfunction CodedBy() {\r\n    return (\r\n        <div style={{position: \"fixed\", textAlign: \"left\", width: 400, bottom: 0, left: 0}}>\r\n            Coded with <span role=\"img\" aria-label=\"Love emoji\">❤️</span> in <em><strong>ReactJS</strong></em> by <strong>TARAN MAND</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodedBy;","import React from 'react';\r\nimport TodoList from './components/TodoList';\r\nimport CodedBy from './components/CodedBy';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <TodoList />\r\n            \r\n            <CodedBy />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import TravelForm from './components/TravelForm';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const myfirstelement = <h1>Hello React!</h1>\r\n\r\n// class Car extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {color: \"red\", username: \"\", age: null, errMsg: \"\", title: null};\r\n//         this.changeColor = this.changeColor.bind(this);\r\n//         this.myChangeHandler = this.myChangeHandler.bind(this);\r\n//     }\r\n\r\n//     static getDerivedStateFromProps(props, state) {\r\n//         return {color: props.color};\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         fetch('https://jsonplaceholder.typicode.com/todos/4')\r\n//         .then(response => response.json())\r\n//         .then(json => {\r\n//             console.log(json);\r\n//             this.setState({title: json.title});\r\n//         });\r\n//     }\r\n\r\n//     changeColor(newColor, ev) {\r\n//         //alert(ev.type);\r\n//         this.setState({color: newColor});\r\n//     }\r\n\r\n//     myChangeHandler(ev) {\r\n//         let nam = ev.target.name;\r\n//         let val = ev.target.value;\r\n//         let err = \"\";\r\n\r\n//         if (nam === \"age\") {\r\n//             if (val !==\"\" && !Number(val)) {\r\n//               err = <strong>Your age must be a number</strong>;\r\n//               ev.target.value = \"\";\r\n//             } \r\n//         }\r\n//         this.setState({errMsg: err});\r\n//         this.setState({[nam]: val});\r\n//     }\r\n\r\n//     mySubmitHandler = (ev) => {\r\n//         alert(\"You are submitting \" + this.state.username + \" \" + this.state.age);\r\n//         //ev.preventDefault();\r\n//         let age = this.state.age;\r\n//         if (!Number(age)) {\r\n//             alert(\"Your age must be a number\");\r\n//             ev.preventDefault();\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         let header = \"\";\r\n//         if (this.state.username) {\r\n//             header = <h2>Hello {this.state.username} :)</h2>\r\n//         }\r\n\r\n//         return (<div>\r\n//                     <h1>I am a <span style={{color: this.state.color}}>{this.state.color}</span> Car!, My model is {this.props.model} and year is {this.props.year} </h1>\r\n//                     <h3>Title feteched from API: {this.state.title}</h3>\r\n//                     <button id=\"btn\" onClick={this.changeColor.bind(this, \"yellow\")}>Click me!</button>\r\n//                     <form action=\"\" method=\"GET\" onSubmit={this.mySubmitHandler}>\r\n//                         {header}\r\n//                         <p>Enter Your Name: </p>\r\n//                         <input type=\"text\" name=\"username\" onChange={this.myChangeHandler} />\r\n//                         <p>Enter Your Age: </p>\r\n//                         <input type=\"text\" name=\"age\" onChange={this.myChangeHandler} />{this.state.errMsg}<br />\r\n//                         <input type=\"submit\" />\r\n\r\n//                     </form>\r\n//                 </div>);\r\n//     }\r\n// }\r\n\r\n\r\n// function Truck() {\r\n//     var props = {type: \"B-Double\"};\r\n\r\n//     return <h2>I am a {props.type} Truck!</h2>;\r\n// }\r\n\r\n\r\n// class Garage extends React.Component {\r\n//     render() {\r\n//         return ( <div className=\"mycar\">\r\n//                     <Car model=\"Chrysler\" year=\"2014\" color=\"red\" />\r\n//                     <Truck />\r\n//                     <Car model=\"Ford\" year=\"2018\" color=\"pink\" />\r\n//                 </div>);\r\n//     }\r\n// }\r\n\r\n// ReactDOM.render(<Garage /> , document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}